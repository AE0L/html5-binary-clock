const 
  curry       = fn => function $curry(...args) { return args.length < fn.length ? $curry.bind(null, ...args) : fn.call(null, ...args) },
  compose     = (...fns) => (...args) => fns.reduceRight((res, fn) => [fn.call(null, ...res)], args)[0],
  memoize  = f => { const c = {}; return (...a) => { const as = JSON.stringify(a); c[as] = c[as] || f(...a); return c[as] }},

  divide      = curry((a, b) => a / b),
  equals      = curry((a, b) => a === b),
  floor       = n => ~~n,
  forEach     = curry((f, a) => a.forEach(f)),
  head        = a => a[0],
  last        = a => a[a.length - 1],
  modulus     = curry((a, b) => a % b),
  not         = a => !a,
  power       = Math.pow,
  push        = curry((s, v) => s.push(v)),
  tail        = a => a[a.length - 1],
  toString    = String,
  
  elem     = i => document.getElementById(i),
  contains = curry((s, v) => s.some(e => e === v)),
  addClass = curry((c, s) => s.classList.add(c)),
  remClass = curry((c, s) => s.classList.remove(c)),
  listener = curry((e, s, f) => s.addEventListener(e, f)),
  hours    = d => d.getHours(),
  minutes  = d => d.getMinutes(),
  seconds  = d => d.getSeconds(),
  not0     = memoize(n => not(equals(n, 0))),
  divBy2   = memoize(n => !!modulus(n, 2)),
  div2     = memoize(n => floor(divide(n, 2)))
